Names of team members:
  Olivia LaVal
  Katelyn Van Dyke

Programming language used:
  Python
  
Hardware Used:
  Dell and MacBook laptops

------------------------------

Uniform cost tree search:
  Implementation description:
  Results on instance 1:
    First 5 search nodes: {(2,2), (3,2), (1,2), (2,3), (2,1)}
    Total num of nodes expanded: 21666
    Total num of nodes generated: 74343
    CPU execution time: 69.2 seconds
    Solution: No Solution
      Sequence of moves: {Up, Suck, Down, Right, Right, Suck, Down, Right, Suck}
      Number of moves: 9
      Cost: 6.7
  Results on instance 2:
    First 5 search nodes: {(3,2), (4,2), (2,2), (3,3), (3,1)}
    Total num of nodes expanded: 57865
    Total num of nodes generated: 204045
    CPU execution time: 10 minutes (timeout!)
    Solution: No Solution


Uniform cost graph search:
  Implementation description:
    The algorithm is written directly from the pseudocode in the homework document.
    The algorithm expands nodes starting from the initial location of the vacuum.
    Nodes cannot be expanded if they have already been expanded before.
    Nodes are expanded in order of least cost
    An expanded node generates nodes for moving Left, Right, Up, and Down, unless that move would take the vacuum outside of the world.
      It also generates a node for Suck if the location is Dirty ('D')
  Results on instance 1:
    First 5 search nodes: {(2,2), (3,2), (1,2), (2,3), (2,1)}
    Total num of nodes expanded: 20
    Total num of nodes generated: 65
    CPU execution time: 0 seconds
    Solution: No solution found
      Sequence of moves: N/A
      Number of moves: N/A
      Cost: N/A
      Explanation: The algorithm does not allow a node to be expanded again once expanded. This means each node can only be expanded based on the path of least cost to reach it. This does not necessarily mean that a path to a solution will be found, as to clean all rooms we might have to deviate from the least cost path. In the example space, a solution is not found.
  Results on instance 2:
    First 5 search nodes: {(3,2), (4,2), (2,2), (3,3), (3,1)}
    Total num of nodes expanded: 20
    Total num of nodes generated: 66
    CPU execution time: 0 seconds
    Solution: No solution found
      Sequence of moves: N/A
      Number of moves: N/A
      Cost: N/A
      Explanation: Same as instance 1


Iterative deepening tree search:
  Implementation description:
    The algorithm is written directly from the pseudocode in the homework document.
    The algorithm expands nodes starting from the initial location of the vacuum.
    Nodes are generated in a DFS pattern and expanded in a BFS pattern at the leaves.
    The result is a DFS that is capped at each level as it expands.
    Cost is calculated using the final path returned by the goalTest.
    Path is not guaranteed to be the most efficient.
  Results on Instance 1:
    First 5 search nodes: {(2,2), (1,2), (2,1), (2,3), (3,2)} 
    Total num of nodes expanded: 4,096
    Total num of nodes generated: 15,155
    CPU execution time: 14 seconds
    Solution:
      Sequence of moves: up -> right -> right -> down -> down -> right
      Number of moves: 6
      Cost: 6.7
      Explanation: the solution was found at level 6. The algorithm generates some nodes with no data. This data may or may not be overwrited, meaning there's room for improvements to space/time complexity. The solution found may not be the cheapest path, it was just the first discoverable one.
   Results on Instance 2:
    First 5 search nodes: {(3,2), (3,1), (2,1), (3,3), (4,2)} 
    Total num of nodes expanded: 262,144
    Total num of nodes generated: 969,932
    CPU execution time: 10.77 minutes (timeout!)
    Solution:
      Sequence of moves: N/A
      Number of moves: N/A
      Cost: N/A
      Explanation: by the time you get to level 9, the tree has grown so fast that a solution is not found in a reasonable amount of time. For this reason, a tree search algorithm is not optimal.
